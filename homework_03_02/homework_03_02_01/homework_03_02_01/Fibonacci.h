/* Fibonacci.h */

/* 
 * Ќапишите программу, котора€ реализует рекурсивный подсчЄт чисел ‘ибоначчи.
 *  роме написани€ кода нужно оценить сложность алгоритма вычислени€
 * n-го числа ‘ибоначчи по скорости и по пам€ти.
 */

#ifndef FIBONACCI_H
#define FIBONACCI_H

namespace seq
{
    struct Fibonacci
    {
        static size_t iterative_method(size_t num);
        /* 
         * ¬џ„»—Ћ»“≈Ћ№Ќјя ¬–≈ћ≈ЌЌјя —Ћќ∆Ќќ—“№
         * ѕо аналогии оценки сложности алгоритма нахождени€ числа ‘ибоначии
         * итерационным методом проведем анализ сложности рекурсивого метода.
         * ѕосчитаем количество циклов рекурсии (количество окончаний ветвей)
         * дл€ нахождени€ n-го числа ‘ибоначчи.
         * ѕолученный р€д количества циклов не что иное как р€д чисел ‘ибоначчи с 
         * сдвигом влево на один элемент, который можно описать экспонентой e^0.4839*x.
         * ћожно сказать, что после определени€ 10-го числа алгоритмическа€ сложность 
         * больше чем O(n^2) и меньше O(2^n)
         */

        /* 
         * ¬џ„»—Ћ»“≈Ћ№Ќјя ≈ћ ќ—“Ќјя —Ћќ∆Ќќ—“№
         * ≈сли не учитывать переполнение стека,то выделение пам€ти не зависит от количества
         * вход€щих данных.
         * ¬џ„»—Ћ»“≈Ћ№Ќјя ≈ћ ќ—“Ќјя —Ћќ∆Ќќ—“№ - O(1)
        */
        static size_t recursive_method(size_t num);
    };
};
#endif /* FIBONACCI_H */